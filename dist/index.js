(function(){function $parcel$export(e,r,t,a){Object.defineProperty(e,r,{get:t,set:a,enumerable:!0,configurable:!0})}var $parcel$global="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},$parcel$modules={},$parcel$inits={},parcelRequire=$parcel$global.parcelRequire454f;null==parcelRequire&&(parcelRequire=function(e){if(e in $parcel$modules)return $parcel$modules[e].exports;if(e in $parcel$inits){var r=$parcel$inits[e];delete $parcel$inits[e];var t={id:e,exports:{}};return $parcel$modules[e]=t,r.call(t.exports,t,t.exports),t.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a},parcelRequire.register=function(e,r){$parcel$inits[e]=r},$parcel$global.parcelRequire454f=parcelRequire),parcelRequire.register("aMTHF",(function(module,exports){var $4aPRa=parcelRequire("4aPRa"),scripts=(0,$4aPRa.loadUserScripts)();iina.console.log(scripts);var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=scripts[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _value=_step.value,id=_value.id,name=_value.name;iina.console.log(`Running script "${name}", id=${id}`);var path=`@data/${id}.js`;iina.file.exists(path)||console.log(`File ${path} doesn't exist; skipped.`);var content=iina.file.read(path);eval(content)}}catch(e){_didIteratorError=!0,_iteratorError=e}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}})),parcelRequire.register("4aPRa",(function(e,r){$parcel$export(e.exports,"SCRIPT_LIST_PATH",(function(){return i})),$parcel$export(e.exports,"loadUserScripts",(function(){return o})),$parcel$export(e.exports,"uuidv4",(function(){return n}));iina.menu;var t=iina.file,a=iina.console,i="@data/script-list.json";function o(){var e=function(){t.write(i,"[]")};t.exists(i)||e();var r=t.read(i),o=[];try{o=JSON.parse(r),a.log(`Scripts loaded: ${o.length}`)}catch(o){a.log("Cannot parse the script list - will recreate one"),t.write(`${i}.backup`,r),e()}return o}function n(){return"10000000-1000-4000-8000-100000000000".replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}})),parcelRequire("aMTHF")})();
//# sourceMappingURL=index.js.map
